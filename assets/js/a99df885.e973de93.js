"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[2094],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),h=p(n),u=o,m=h["".concat(l,".").concat(u)]||h[u]||d[u]||i;return n?a.createElement(m,s(s({ref:t},c),{},{components:n})):a.createElement(m,s({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=h;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,s[1]=r;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5427:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return r},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var a=n(2122),o=n(9756),i=(n(7294),n(3905)),s={title:"class Snapshot",sidebar_label:"Snapshot"},r=void 0,l={unversionedId:"api-reference/core/Snapshot",id:"api-reference/core/Snapshot",isDocsHomePage:!1,title:"class Snapshot",description:"A Snapshot object represents an immutable snapshot of the state of Recoil atoms.  It is intended to standardize the API for observing, inspecting, and managing global Recoil state.  It is mostly useful for dev tools, global state synchronization, history navigation, etc.",source:"@site/docs/api-reference/core/Snapshot.md",sourceDirName:"api-reference/core",slug:"/api-reference/core/Snapshot",permalink:"/docs/api-reference/core/Snapshot",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/docs/api-reference/core/Snapshot.md",version:"current",frontMatter:{title:"class Snapshot",sidebar_label:"Snapshot"},sidebar:"docs",previous:{title:"useRecoilCallback()",permalink:"/docs/api-reference/core/useRecoilCallback"},next:{title:"useRecoilTransactionObserver()",permalink:"/docs/api-reference/core/useRecoilTransactionObserver"}},p=[{value:"Obtaining Snapshots",id:"obtaining-snapshots",children:[{value:"Hooks",id:"hooks",children:[]},{value:"Building a Snapshot",id:"building-a-snapshot",children:[]}]},{value:"Reading Snapshots",id:"reading-snapshots",children:[{value:"Example",id:"example",children:[]}]},{value:"Transforming Snapshots",id:"transforming-snapshots",children:[]},{value:"Going to a Snapshot",id:"going-to-a-snapshot",children:[]},{value:"Developer Tools",id:"developer-tools",children:[{value:"Snapshot IDs",id:"snapshot-ids",children:[]},{value:"Enumerate Atoms and Selectors",id:"enumerate-atoms-and-selectors",children:[]},{value:"Debug information",id:"debug-information",children:[]}]},{value:"State Initialization",id:"state-initialization",children:[]}],c={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Snapshot")," object represents an immutable snapshot of the state of Recoil ",(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference/core/atom"},"atoms"),".  It is intended to standardize the API for observing, inspecting, and managing global Recoil state.  It is mostly useful for dev tools, global state synchronization, history navigation, etc."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"class Snapshot {\n  // Accessors to inspect snapshot state\n  getLoadable: <T>(RecoilValue<T>) => Loadable<T>;\n  getPromise: <T>(RecoilValue<T>) => Promise<T>;\n\n  // API to transform snapshots for transactions\n  map: (MutableSnapshot => void) => Snapshot;\n  asyncMap: (MutableSnapshot => Promise<void>) => Promise<Snapshot>;\n\n  // Developer Tools API\n  getID: () => SnapshotID;\n  getNodes_UNSTABLE: ({\n    isModified?: boolean,\n  } | void) => Iterable<RecoilValue<mixed>>;\n  getInfo_UNSTABLE: <T>(RecoilValue<T>) => {...};\n}\n\nfunction snapshot_UNSTABLE(initializeState?: (MutableSnapshot => void)): Snapshot\n")),(0,i.kt)("h2",{id:"obtaining-snapshots"},"Obtaining Snapshots"),(0,i.kt)("h3",{id:"hooks"},"Hooks"),(0,i.kt)("p",null,"Recoil provides the following hooks for obtaining snapshots based on the current state:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/api-reference/core/useRecoilCallback"},(0,i.kt)("inlineCode",{parentName:"a"},"useRecoilCallback()"))," - Asynchronous access to a Snapshot"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/api-reference/core/useRecoilSnapshot"},(0,i.kt)("inlineCode",{parentName:"a"},"useRecoilSnapshot()"))," - Synchronous access to a Snapshot"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/api-reference/core/useRecoilTransactionObserver"},(0,i.kt)("inlineCode",{parentName:"a"},"useRecoilTransactionObserver_UNSTABLE()"))," - Subscribe to Snapshots for all state changes")),(0,i.kt)("h3",{id:"building-a-snapshot"},"Building a Snapshot"),(0,i.kt)("p",null,"You can also build a fresh snapshot using the ",(0,i.kt)("inlineCode",{parentName:"p"},"snapshot_UNSTABLE()")," factory, which accepts an optional initializer function.  This can be used for ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/testing"},"testing")," or evaluating selectors outside of a React context."),(0,i.kt)("h2",{id:"reading-snapshots"},"Reading Snapshots"),(0,i.kt)("p",null,"Snapshots are read-only with respect to atom state.  They can be used to read atom state and evaluate selectors' derived state.  ",(0,i.kt)("inlineCode",{parentName:"p"},"getLoadable()")," provides a ",(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference/core/Loadable"},(0,i.kt)("inlineCode",{parentName:"a"},"Loadable"))," with the state of the atom or selector in this Snapshot.  The ",(0,i.kt)("inlineCode",{parentName:"p"},"getPromise()")," method can be used to wait for the evaluated value of asynchronous selectors, so you can see what the value would be based on the static atom state."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'function MyComponent() {\n  const logState = useRecoilCallback(({snapshot}) => () => {\n    console.log("State: ", snapshot.getLoadable(myAtom).contents);\n\n    const newSnapshot = snapshot.map(({set}) => set(myAtom, 42));\n  });\n}\n')),(0,i.kt)("h2",{id:"transforming-snapshots"},"Transforming Snapshots"),(0,i.kt)("p",null,"There are cases where you may wish to mutate a snapshot.  While snapshots are immutable, they have methods to map themselves with a set of transformations to a new immutable snapshot.  The map methods take a callback that is passed a MutableSnapshot, which is mutated throughout the callback and will ultimately become the new snapshot returned by the mapping operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"class MutableSnapshot {\n  set: <T>(RecoilState<T>, T | DefaultValue | (T => T | DefaultValue)) => void;\n  reset: <T>(RecoilState<T>) => void;\n}\n")),(0,i.kt)("p",null,"Notice that ",(0,i.kt)("inlineCode",{parentName:"p"},"set()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"reset()")," have the same signature as callbacks provided to a writeable selector's ",(0,i.kt)("inlineCode",{parentName:"p"},"set")," property, but they only effect the new snapshot, not the current state."),(0,i.kt)("h2",{id:"going-to-a-snapshot"},"Going to a Snapshot"),(0,i.kt)("p",null,"The following hook can be used for navigating the current Recoil state to the provided ",(0,i.kt)("inlineCode",{parentName:"p"},"Snapshot"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/api-reference/core/useGotoRecoilSnapshot"},(0,i.kt)("inlineCode",{parentName:"a"},"useGotoRecoilSnapshot()"))," - Update current state to match a Snapshot")),(0,i.kt)("h2",{id:"developer-tools"},"Developer Tools"),(0,i.kt)("p",null,"Snapshots provide some methods useful for ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/dev-tools"},"building developer tools")," or debugging capabilities with Recoil.  This API is still evolving, and thus marked as ",(0,i.kt)("inlineCode",{parentName:"p"},"_UNSTABLE"),", as we work on the initial dev tools."),(0,i.kt)("h3",{id:"snapshot-ids"},"Snapshot IDs"),(0,i.kt)("p",null,"Each committed state or mutated Snapshot has a unique opaque version ID that can be obtained via ",(0,i.kt)("inlineCode",{parentName:"p"},"getID()"),". This can be used to detect when we have gone back to a previous snapshot via ",(0,i.kt)("inlineCode",{parentName:"p"},"useGotoRecoilSnapshot()"),"."),(0,i.kt)("h3",{id:"enumerate-atoms-and-selectors"},"Enumerate Atoms and Selectors"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"getNodes_UNSTABLE()")," method can be used to iterate all atoms and selectors that were in use for this snapshot.  Atoms, selectors, and families may be created at any time.  However, they will only show up in the snapshot if they are actually used.  Atoms and selectors may be removed from subsequent state snapshots if they are no longer being used."),(0,i.kt)("p",null,"An optional ",(0,i.kt)("inlineCode",{parentName:"p"},"isModified")," flag may be specified to only return atoms which have been modified since the last transaction."),(0,i.kt)("h3",{id:"debug-information"},"Debug information"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"getInfo_UNSTABLE()")," method provides additional debug information for atoms and selectors.  The debug information provided is evolving, but may include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"loadable")," - A Loadable with the current state.  Unlike methods like ",(0,i.kt)("inlineCode",{parentName:"li"},"getLoadable()"),", this method will not mutate the snapshot at all.  It provides the current state and will not initialize new atoms/selectors, perform any new selector evaluations, or update any dependencies or subscriptions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isSet")," - True if this is an atom with an explicit value stored in the snapshot state.  False if this is a selector or using the default atom state."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isModified")," - True if this is an atom which was modified since the last transaction."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type")," - Either an ",(0,i.kt)("inlineCode",{parentName:"li"},"atom")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"selector")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deps")," - An iterator over the atoms or selectors this node depends on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"subscribers")," - Information about what is subscribing to this node for this snapshot.  Details under development.")),(0,i.kt)("p",null,"This is similar to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference/core/useGetRecoilValueInfo"},(0,i.kt)("inlineCode",{parentName:"a"},"useGetRecoilValueInfo_UNSTABLE()"))," hook, but provides information based on the state in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Snapshot")," instead of the current state.  It cannot provide information not associated with a snapshot of Recoil state, such as subscribing React components."),(0,i.kt)("h2",{id:"state-initialization"},"State Initialization"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference/core/RecoilRoot"},(0,i.kt)("inlineCode",{parentName:"a"},"<RecoilRoot>"))," component and ",(0,i.kt)("inlineCode",{parentName:"p"},"snapshot_UNSTABLE()")," factory take an optional ",(0,i.kt)("inlineCode",{parentName:"p"},"initializeState")," prop for initializing the state via a ",(0,i.kt)("inlineCode",{parentName:"p"},"MutableSnapshot"),".  This can be helpful for loading persisted state when you know all atoms in advance and is compatible with server-side rendering where the state should be setup synchronously with the initial render.  For per-atom initialization/persistence and ease of working with dynamic atoms, consider ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/atom-effects"},"atom effects")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"function MyApp() {\n  function initializeState({set}) {\n    set(myAtom, 'foo');\n  }\n\n  return (\n    <RecoilRoot initializeState={initializeState}>\n      ...\n    </RecoilRoot>\n  );\n}\n")))}d.isMDXComponent=!0}}]);