(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{145:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),u=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(n),b=r,m=p["".concat(c,".").concat(b)]||p[b]||f[b]||o;return n?a.a.createElement(m,i(i({ref:t},s),{},{components:n})):a.a.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=b;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var s=2;s<o;s++)c[s]=n[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},91:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(8),o=(n(0),n(145)),c={title:"constSelector(constant)",sidebar_label:"constSelector()"},i={unversionedId:"api-reference/utils/constSelector",id:"api-reference/utils/constSelector",isDocsHomePage:!1,title:"constSelector(constant)",description:"A selector which always provides a constant value.",source:"@site/docs/api-reference/utils/constSelector.md",slug:"/api-reference/utils/constSelector",permalink:"/docs/api-reference/utils/constSelector",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/docs/api-reference/utils/constSelector.md",version:"current",sidebar_label:"constSelector()",sidebar:"docs",previous:{title:"selectorFamily(options)",permalink:"/docs/api-reference/utils/selectorFamily"},next:{title:"errorSelector(message)",permalink:"/docs/api-reference/utils/errorSelector"}},l=[{value:"Example",id:"example",children:[]}],s={toc:l};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"A ",Object(o.b)("a",{parentName:"p",href:"/docs/api-reference/core/selector"},"selector")," which always provides a constant value."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"function constSelector<T: Parameter>(constant: T): RecoilValueReadOnly<T>\n")),Object(o.b)("p",null,"A ",Object(o.b)("inlineCode",{parentName:"p"},"constSelector")," may be useful if you have an interface that uses a type such as ",Object(o.b)("inlineCode",{parentName:"p"},"RecoilValue<T>")," or ",Object(o.b)("inlineCode",{parentName:"p"},"RecoilValueReadOnly<T>")," that may be provided by different selector implementations."),Object(o.b)("p",null,"These selectors will memoize based on reference value equality.  So, ",Object(o.b)("inlineCode",{parentName:"p"},"constSelector()")," can be called multiple times with the same value and the same selector will be provided.  Because of this, the value used as a constant is restricted to types that may be serialized using the Recoil serialization.  Please see documentation in ",Object(o.b)("a",{parentName:"p",href:"/docs/api-reference/utils/selectorFamily"},Object(o.b)("inlineCode",{parentName:"a"},"selectorFamily"))," describing the limitations."),Object(o.b)("h3",{id:"example"},"Example"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"type MyInterface = {\n  queryForStuff: RecoilValue<Thing>,\n  ...\n};\n\nconst myInterfaceInstance1: MyInterface = {\n  queryForStuff: selectorThatDoesQuery,\n};\n\nconst myInterfaceInstance2: MyInterface = {\n  queryForStuff: constSelector(thing),\n};\n")))}u.isMDXComponent=!0}}]);