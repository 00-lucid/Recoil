(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[6901],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),s=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=s(r),m=o,d=f["".concat(i,".").concat(m)]||f[m]||p[m]||a;return r?n.createElement(d,c(c({ref:t},u),{},{components:r})):n.createElement(d,c({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=f;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,c[1]=l;for(var s=2;s<a;s++)c[s]=r[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},8048:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return c},metadata:function(){return l},toc:function(){return i},default:function(){return u}});var n=r(2122),o=r(9756),a=(r(7294),r(3905)),c={title:"constSelector(constant)",sidebar_label:"constSelector()"},l={unversionedId:"api-reference/utils/constSelector",id:"api-reference/utils/constSelector",isDocsHomePage:!1,title:"constSelector(constant)",description:"A selector which always provides a constant value.",source:"@site/docs/api-reference/utils/constSelector.md",sourceDirName:"api-reference/utils",slug:"/api-reference/utils/constSelector",permalink:"/docs/api-reference/utils/constSelector",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/docs/api-reference/utils/constSelector.md",version:"current",sidebar_label:"constSelector()",frontMatter:{title:"constSelector(constant)",sidebar_label:"constSelector()"},sidebar:"docs",previous:{title:"selectorFamily(options)",permalink:"/docs/api-reference/utils/selectorFamily"},next:{title:"errorSelector(message)",permalink:"/docs/api-reference/utils/errorSelector"}},i=[{value:"Example",id:"example",children:[]}],s={toc:i};function u(e){var t=e.components,r=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/selector"},"selector")," which always provides a constant value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function constSelector<T: Parameter>(constant: T): RecoilValueReadOnly<T>\n")),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"constSelector")," may be useful if you have an interface that uses a type such as ",(0,a.kt)("inlineCode",{parentName:"p"},"RecoilValue<T>")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"RecoilValueReadOnly<T>")," that may be provided by different selector implementations."),(0,a.kt)("p",null,"These selectors will memoize based on reference value equality.  So, ",(0,a.kt)("inlineCode",{parentName:"p"},"constSelector()")," can be called multiple times with the same value and the same selector will be provided.  Because of this, the value used as a constant is restricted to types that may be serialized using the Recoil serialization.  Please see documentation in ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/utils/selectorFamily"},(0,a.kt)("inlineCode",{parentName:"a"},"selectorFamily"))," describing the limitations."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"type MyInterface = {\n  queryForStuff: RecoilValue<Thing>,\n  ...\n};\n\nconst myInterfaceInstance1: MyInterface = {\n  queryForStuff: selectorThatDoesQuery,\n};\n\nconst myInterfaceInstance2: MyInterface = {\n  queryForStuff: constSelector(thing),\n};\n")))}u.isMDXComponent=!0}}]);