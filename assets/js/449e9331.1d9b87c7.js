"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[5078],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=n,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return r?a.createElement(f,i(i({ref:t},u),{},{components:r})):a.createElement(f,i({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6506:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var a=r(2122),n=r(9756),o=(r(7294),r(3905)),i={title:"class Loadable",sidebar_label:"Loadable"},l=void 0,s={unversionedId:"api-reference/core/Loadable",id:"api-reference/core/Loadable",isDocsHomePage:!1,title:"class Loadable",description:"A Loadable object represents the current state of a Recoil atom or selector.  This state may either have a value available, may be in an error state, or may still be pending asynchronous resolution.  A Loadable has the following interface:",source:"@site/docs/api-reference/core/Loadable.md",sourceDirName:"api-reference/core",slug:"/api-reference/core/Loadable",permalink:"/docs/api-reference/core/Loadable",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/docs/api-reference/core/Loadable.md",version:"current",frontMatter:{title:"class Loadable",sidebar_label:"Loadable"},sidebar:"docs",previous:{title:"selector()",permalink:"/docs/api-reference/core/selector"},next:{title:"useRecoilState()",permalink:"/docs/api-reference/core/useRecoilState"}},c=[{value:"Example",id:"example",children:[]}],u={toc:c};function p(e){var t=e.components,r=(0,n.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Loadable")," object represents the current state of a Recoil ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/atom"},"atom")," or ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/selector"},"selector"),".  This state may either have a value available, may be in an error state, or may still be pending asynchronous resolution.  A ",(0,o.kt)("inlineCode",{parentName:"p"},"Loadable")," has the following interface:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"state"),": The current state of the atom or selector.  Possible values are ",(0,o.kt)("inlineCode",{parentName:"li"},"'hasValue'"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"'hasError'"),", or ",(0,o.kt)("inlineCode",{parentName:"li"},"'loading'"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"contents"),": The value represented by this ",(0,o.kt)("inlineCode",{parentName:"li"},"Loadable"),".  If the state is ",(0,o.kt)("inlineCode",{parentName:"li"},"hasValue"),", it is the actual value, if the state is ",(0,o.kt)("inlineCode",{parentName:"li"},"hasError")," it is the ",(0,o.kt)("inlineCode",{parentName:"li"},"Error")," object that was thrown, and if the state is ",(0,o.kt)("inlineCode",{parentName:"li"},"loading"),", then you can use ",(0,o.kt)("inlineCode",{parentName:"li"},"toPromise()")," to get a ",(0,o.kt)("inlineCode",{parentName:"li"},"Promise")," of the value.")),(0,o.kt)("p",null,"Loadables also contain helper methods for accessing the current state.  ",(0,o.kt)("em",{parentName:"p"},"Consider this API to be unstable"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"getValue()")," - Method to access the value that matches the semantics of React Suspense and Recoil selectors.  If the state has a value then it returns a value, if it has an error then it throws that error, and if it is still pending then it suspends execution or rendering to propagate the pending state."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"toPromise()"),": returns a ",(0,o.kt)("inlineCode",{parentName:"li"},"Promise")," that will resolve when the selector has resolved. If the selector is synchronous or has already resolved, it returns a ",(0,o.kt)("inlineCode",{parentName:"li"},"Promise")," that resolves immediately."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"valueMaybe()")," - Returns the value if available, otherwise returns ",(0,o.kt)("inlineCode",{parentName:"li"},"undefined")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"valueOrThrow()")," - Returns the value if available or throws an Error."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"map()")," - Takes a function to transform the value of the Loadable and returns a new Loadable with the transformed value.  The transformation function gets a parameter of the value and returns the new value; it can also propagate thrown errors or suspense.")),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"function UserInfo({userID}) {\n  const userNameLoadable = useRecoilValueLoadable(userNameQuery(userID));\n  switch (userNameLoadable.state) {\n    case 'hasValue':\n      return <div>{userNameLoadable.contents}</div>;\n    case 'loading':\n      return <div>Loading...</div>;\n    case 'hasError':\n      throw userNameLoadable.contents;\n  }\n}\n")))}p.isMDXComponent=!0}}]);