"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[5942],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(r),f=o,d=m["".concat(c,".").concat(f)]||m[f]||p[f]||a;return r?n.createElement(d,i(i({ref:t},u),{},{components:r})):n.createElement(d,i({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3463:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return s},default:function(){return p}});var n=r(2122),o=r(9756),a=(r(7294),r(3905)),i={title:"useRecoilValue(state)",sidebar_label:"useRecoilValue()"},l=void 0,c={unversionedId:"api-reference/core/useRecoilValue",id:"api-reference/core/useRecoilValue",isDocsHomePage:!1,title:"useRecoilValue(state)",description:"Returns the value of the given Recoil state.",source:"@site/docs/api-reference/core/useRecoilValue.md",sourceDirName:"api-reference/core",slug:"/api-reference/core/useRecoilValue",permalink:"/docs/api-reference/core/useRecoilValue",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/docs/api-reference/core/useRecoilValue.md",version:"current",frontMatter:{title:"useRecoilValue(state)",sidebar_label:"useRecoilValue()"},sidebar:"docs",previous:{title:"useRecoilState()",permalink:"/docs/api-reference/core/useRecoilState"},next:{title:"useSetRecoilState()",permalink:"/docs/api-reference/core/useSetRecoilState"}},s=[{value:"Example",id:"example",children:[]}],u={toc:s};function p(e){var t=e.components,r=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Returns the value of the given Recoil state."),(0,a.kt)("p",null,"This hook will implicitly subscribe the component to the given state."),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function useRecoilValue<T>(state: RecoilValue<T>): T;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"state"),": an ",(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/core/atom"},(0,a.kt)("inlineCode",{parentName:"a"},"atom"))," or ",(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/core/selector"},(0,a.kt)("inlineCode",{parentName:"a"},"selector")))),(0,a.kt)("hr",null),(0,a.kt)("p",null,"This is the recommended hook to use when a component intends to read state without writing to it, as this hook works with both ",(0,a.kt)("strong",{parentName:"p"},"read-only state")," and ",(0,a.kt)("strong",{parentName:"p"},"writeable state"),". Atoms are writeable state while selectors may be either read-only or writeable. See ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/selector"},(0,a.kt)("inlineCode",{parentName:"a"},"selector()"))," for more info."),(0,a.kt)("p",null,"Using this hook in a React component will subscribe the component to re-render when the state is updated.  This hook may throw if the state has an error or is pending asynchronous resolution.  Please see ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/asynchronous-data-queries"},"this guide"),"."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import {atom, selector, useRecoilValue} from 'recoil';\n\nconst namesState = atom({\n  key: 'namesState',\n  default: ['', 'Ella', 'Chris', '', 'Paul'],\n});\n\nconst filteredNamesState = selector({\n  key: 'filteredNamesState',\n  get: ({get}) => get(namesState).filter((str) => str !== ''),\n});\n\nfunction NameDisplay() {\n  const names = useRecoilValue(namesState);\n  const filteredNames = useRecoilValue(filteredNamesState);\n\n  return (\n    <>\n      Original names: {names.join(',')}\n      <br />\n      Filtered names: {filteredNames.join(',')}\n    </>\n  );\n}\n")))}p.isMDXComponent=!0}}]);