"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","collapsed":true,"collapsible":true,"label":"Introduction","items":[{"type":"link","label":"Motivation","href":"/docs/introduction/motivation","docId":"introduction/motivation"},{"type":"link","label":"Core Concepts","href":"/docs/introduction/core-concepts","docId":"introduction/core-concepts"},{"type":"link","label":"Installation","href":"/docs/introduction/installation","docId":"introduction/installation"},{"type":"link","label":"Getting Started","href":"/docs/introduction/getting-started","docId":"introduction/getting-started"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Basic Tutorial","items":[{"type":"link","label":"Intro","href":"/docs/basic-tutorial/intro","docId":"basic-tutorial/intro"},{"type":"link","label":"Atoms","href":"/docs/basic-tutorial/atoms","docId":"basic-tutorial/atoms"},{"type":"link","label":"Selectors","href":"/docs/basic-tutorial/selectors","docId":"basic-tutorial/selectors"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Guides","items":[{"type":"link","label":"Asynchronous Data Queries","href":"/docs/guides/asynchronous-data-queries","docId":"guides/asynchronous-data-queries"},{"type":"link","label":"Atom Effects","href":"/docs/guides/atom-effects","docId":"guides/atom-effects"},{"type":"link","label":"Testing","href":"/docs/guides/testing","docId":"guides/testing"},{"type":"link","label":"Dev Tools","href":"/docs/guides/dev-tools","docId":"guides/dev-tools"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"API Reference","items":[{"type":"link","label":"<RecoilRoot />","href":"/docs/api-reference/core/RecoilRoot","docId":"api-reference/core/RecoilRoot"},{"type":"category","collapsed":true,"collapsible":true,"label":"State","items":[{"type":"link","label":"atom()","href":"/docs/api-reference/core/atom","docId":"api-reference/core/atom"},{"type":"link","label":"selector()","href":"/docs/api-reference/core/selector","docId":"api-reference/core/selector"},{"type":"link","label":"Loadable","href":"/docs/api-reference/core/Loadable","docId":"api-reference/core/Loadable"},{"type":"link","label":"useRecoilState()","href":"/docs/api-reference/core/useRecoilState","docId":"api-reference/core/useRecoilState"},{"type":"link","label":"useRecoilValue()","href":"/docs/api-reference/core/useRecoilValue","docId":"api-reference/core/useRecoilValue"},{"type":"link","label":"useSetRecoilState()","href":"/docs/api-reference/core/useSetRecoilState","docId":"api-reference/core/useSetRecoilState"},{"type":"link","label":"useResetRecoilState()","href":"/docs/api-reference/core/useResetRecoilState","docId":"api-reference/core/useResetRecoilState"},{"type":"link","label":"useRecoilStateLoadable()","href":"/docs/api-reference/core/useRecoilStateLoadable","docId":"api-reference/core/useRecoilStateLoadable"},{"type":"link","label":"useRecoilValueLoadable()","href":"/docs/api-reference/core/useRecoilValueLoadable","docId":"api-reference/core/useRecoilValueLoadable"},{"type":"link","label":"useGetRecoilValueInfo()","href":"/docs/api-reference/core/useGetRecoilValueInfo","docId":"api-reference/core/useGetRecoilValueInfo"},{"type":"link","label":"useRecoilRefresher()","href":"/docs/api-reference/core/useRecoilRefresher","docId":"api-reference/core/useRecoilRefresher"},{"type":"link","label":"isRecoilValue()","href":"/docs/api-reference/core/isRecoilValue","docId":"api-reference/core/isRecoilValue"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Utils","items":[{"type":"link","label":"atomFamily()","href":"/docs/api-reference/utils/atomFamily","docId":"api-reference/utils/atomFamily"},{"type":"link","label":"selectorFamily()","href":"/docs/api-reference/utils/selectorFamily","docId":"api-reference/utils/selectorFamily"},{"type":"link","label":"constSelector()","href":"/docs/api-reference/utils/constSelector","docId":"api-reference/utils/constSelector"},{"type":"link","label":"errorSelector()","href":"/docs/api-reference/utils/errorSelector","docId":"api-reference/utils/errorSelector"},{"type":"link","label":"noWait()","href":"/docs/api-reference/utils/noWait","docId":"api-reference/utils/noWait"},{"type":"link","label":"waitForAll()","href":"/docs/api-reference/utils/waitForAll","docId":"api-reference/utils/waitForAll"},{"type":"link","label":"waitForAllSettled()","href":"/docs/api-reference/utils/waitForAllSettled","docId":"api-reference/utils/waitForAllSettled"},{"type":"link","label":"waitForNone()","href":"/docs/api-reference/utils/waitForNone","docId":"api-reference/utils/waitForNone"},{"type":"link","label":"waitForAny()","href":"/docs/api-reference/utils/waitForAny","docId":"api-reference/utils/waitForAny"}]},{"type":"link","label":"useRecoilTransaction()","href":"/docs/api-reference/core/useRecoilTransaction","docId":"api-reference/core/useRecoilTransaction"},{"type":"link","label":"useRecoilCallback()","href":"/docs/api-reference/core/useRecoilCallback","docId":"api-reference/core/useRecoilCallback"},{"type":"category","collapsed":true,"collapsible":true,"label":"Snapshots","items":[{"type":"link","label":"Snapshot","href":"/docs/api-reference/core/Snapshot","docId":"api-reference/core/Snapshot"},{"type":"link","label":"useRecoilTransactionObserver()","href":"/docs/api-reference/core/useRecoilTransactionObserver","docId":"api-reference/core/useRecoilTransactionObserver"},{"type":"link","label":"useRecoilSnapshot()","href":"/docs/api-reference/core/useRecoilSnapshot","docId":"api-reference/core/useRecoilSnapshot"},{"type":"link","label":"useGotoRecoilSnapshot()","href":"/docs/api-reference/core/useGotoRecoilSnapshot","docId":"api-reference/core/useGotoRecoilSnapshot"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Misc","items":[{"type":"link","label":"useRecoilBridgeAcrossReactRoots()","href":"/docs/api-reference/core/useRecoilBridgeAcrossReactRoots","docId":"api-reference/core/useRecoilBridgeAcrossReactRoots"}]}]}]},"docs":{"api-reference/core/atom":{"id":"api-reference/core/atom","title":"atom(options)","description":"An atom represents state in Recoil.  The atom() function returns a writeable RecoilState object.","sidebar":"docs"},"api-reference/core/isRecoilValue":{"id":"api-reference/core/isRecoilValue","title":"isRecoilValue(value)","description":"Returns true if value is either an atom or selector and false otherwise.","sidebar":"docs"},"api-reference/core/Loadable":{"id":"api-reference/core/Loadable","title":"class Loadable","description":"A Loadable object represents the current state of a Recoil atom or selector.  This state may either have a value available, may be in an error state, or may still be pending asynchronous resolution.  A Loadable has the following interface:","sidebar":"docs"},"api-reference/core/RecoilRoot":{"id":"api-reference/core/RecoilRoot","title":"<RecoilRoot ...props />","description":"Provides the context in which atoms have values. Must be an ancestor of any component that uses any Recoil hooks.","sidebar":"docs"},"api-reference/core/selector":{"id":"api-reference/core/selector","title":"selector(options)","description":"Selectors represent a function, or derived state in Recoil.  You can think of them as similar to an \\"idempotent\\" or \\"pure function\\" without side-effects that always returns the same value for a given set of dependency values.  If only a get function is provided, the selector is read-only and returns a RecoilValueReadOnly object.  If a set is also provided, it returns a writeable RecoilState object.","sidebar":"docs"},"api-reference/core/Snapshot":{"id":"api-reference/core/Snapshot","title":"class Snapshot","description":"A Snapshot object represents an immutable snapshot of the state of Recoil atoms.  It is intended to standardize the API for observing, inspecting, and managing global Recoil state.  It is mostly useful for dev tools, global state synchronization, history navigation, etc.","sidebar":"docs"},"api-reference/core/useGetRecoilValueInfo":{"id":"api-reference/core/useGetRecoilValueInfo","title":"useGetRecoilValueInfo_UNSTABLE()","description":"This hook allows a component to \\"peek\\" at the current state, value, and other information about an atom or selector.  This is similar to the getInfo_UNSTABLE() method in Snapshot and atom effects","sidebar":"docs"},"api-reference/core/useGotoRecoilSnapshot":{"id":"api-reference/core/useGotoRecoilSnapshot","title":"useGotoRecoilSnapshot(snapshot)","description":"This hook returns a callback which takes a Snapshot as a parameter and will update the current `` state to match this atom state.","sidebar":"docs"},"api-reference/core/useRecoilBridgeAcrossReactRoots":{"id":"api-reference/core/useRecoilBridgeAcrossReactRoots","title":"useRecoilBridgeAcrossReactRoots()","description":"A hook to help with bridging Recoil state with a nested React root and renderer.","sidebar":"docs"},"api-reference/core/useRecoilCallback":{"id":"api-reference/core/useRecoilCallback","title":"useRecoilCallback(callback, deps)","description":"This hook is similar to useCallback(), but will also provide an API for your callbacks to work with Recoil state.  This hook can be used to construct a callback that has access to a read-only Snapshot of Recoil state and the ability to asynchronously update current Recoil state.","sidebar":"docs"},"api-reference/core/useRecoilRefresher":{"id":"api-reference/core/useRecoilRefresher","title":"useRecoilRefresher_UNSTABLE(state)","description":"The useRecoilRefresher_UNSTABLE() hook returns a callback which can be called with a selector to clear any caches associated with it.  If a selector makes any async requests this would cause it to re-evaluate and issue a new request.  This is useful, for example, if you wish to refresh with newer data or re-try after an error.  (See Asynchronous Data Queries Guide)","sidebar":"docs"},"api-reference/core/useRecoilSnapshot":{"id":"api-reference/core/useRecoilSnapshot","title":"useRecoilSnapshot()","description":"This hook synchronously returns a Snapshot object during rendering and subscribes the calling component for all Recoil state changes.  You may want to use this hook for debug tools, or for server-side rendering where you need to synchronously have the state during the initial render.","sidebar":"docs"},"api-reference/core/useRecoilState":{"id":"api-reference/core/useRecoilState","title":"useRecoilState(state)","description":"Returns a tuple where the first element is the value of state and the second element is a setter function that will update the value of the given state when called.","sidebar":"docs"},"api-reference/core/useRecoilStateLoadable":{"id":"api-reference/core/useRecoilStateLoadable","title":"useRecoilStateLoadable(state)","description":"This hook is intended to be used for reading the value of asynchronous selectors. This hook will implicitly subscribe the component to the given state.","sidebar":"docs"},"api-reference/core/useRecoilTransaction":{"id":"api-reference/core/useRecoilTransaction","title":"useRecoilTransaction_UNSTABLE(callback, deps)","description":"Create a transaction callback which can be used to atomically update multiple atoms in a safe, easy, and efficient way.  Provide a callback for the transaction as a pure function which can get() or set() multiple atoms.  A transaction is similar to the \\"updater\\" form of setting Recoil state, but can operate over multiple atoms.  Writes are visible to subsequent reads from within the same transaction.","sidebar":"docs"},"api-reference/core/useRecoilTransactionObserver":{"id":"api-reference/core/useRecoilTransactionObserver","title":"useRecoilTransactionObserver_UNSTABLE(callback)","description":"NOTE: Please consider this API as unstable","sidebar":"docs"},"api-reference/core/useRecoilValue":{"id":"api-reference/core/useRecoilValue","title":"useRecoilValue(state)","description":"Returns the value of the given Recoil state.","sidebar":"docs"},"api-reference/core/useRecoilValueLoadable":{"id":"api-reference/core/useRecoilValueLoadable","title":"useRecoilValueLoadable(state)","description":"This hook is intended to be used for reading the value of asynchronous selectors. This hook will implicitly subscribe the component to the given state.","sidebar":"docs"},"api-reference/core/useResetRecoilState":{"id":"api-reference/core/useResetRecoilState","title":"useResetRecoilState(state)","description":"Returns a function that will reset the value of the given state to its default value.","sidebar":"docs"},"api-reference/core/useSetRecoilState":{"id":"api-reference/core/useSetRecoilState","title":"useSetRecoilState(state)","description":"Returns a setter function for updating the value of writeable Recoil state.","sidebar":"docs"},"api-reference/utils/atomFamily":{"id":"api-reference/utils/atomFamily","title":"atomFamily(options)","description":"Returns a function that returns a writeable RecoilState atom.","sidebar":"docs"},"api-reference/utils/constSelector":{"id":"api-reference/utils/constSelector","title":"constSelector(constant)","description":"A selector which always provides a constant value.","sidebar":"docs"},"api-reference/utils/errorSelector":{"id":"api-reference/utils/errorSelector","title":"errorSelector(message)","description":"A selector which always throws the provided error","sidebar":"docs"},"api-reference/utils/noWait":{"id":"api-reference/utils/noWait","title":"noWait(state)","description":"A selector helper that will return a Loadable for the current state of the provided atom or selector.","sidebar":"docs"},"api-reference/utils/selectorFamily":{"id":"api-reference/utils/selectorFamily","title":"selectorFamily(options)","description":"Returns a function that returns a read-only RecoilValueReadOnly or writeable RecoilState selector.","sidebar":"docs"},"api-reference/utils/waitForAll":{"id":"api-reference/utils/waitForAll","title":"waitForAll(dependencies)","description":"A concurrency helper which allows us to concurrently evaluate multiple asynchronous dependencies.","sidebar":"docs"},"api-reference/utils/waitForAllSettled":{"id":"api-reference/utils/waitForAllSettled","title":"waitForAllSettled(dependencies)","description":"A concurrency helper that returns a set of Loadables for the current state of the requested dependencies.  It waits until all of the dependencies are either in a value state, or an error state.","sidebar":"docs"},"api-reference/utils/waitForAny":{"id":"api-reference/utils/waitForAny","title":"waitForAny(dependencies)","description":"A concurrency helper that returns a set of Loadables for the current state of the requested dependencies.  It waits until at least one of the dependencies is available.","sidebar":"docs"},"api-reference/utils/waitForNone":{"id":"api-reference/utils/waitForNone","title":"waitForNone(dependencies)","description":"A concurrency helper that returns a set of Loadables for the current state of the requested dependencies.","sidebar":"docs"},"basic-tutorial/atoms":{"id":"basic-tutorial/atoms","title":"Atoms","description":"Atoms contain the source of truth for our application state. In our todo-list, the source of truth will be an array of objects, with each object representing a todo item.","sidebar":"docs"},"basic-tutorial/demo":{"id":"basic-tutorial/demo","title":"Demo (Todo List)","description":"You can write JSX and use React components within your Markdown thanks to MDX."},"basic-tutorial/intro":{"id":"basic-tutorial/intro","title":"Intro","description":"This section assumes you have installed Recoil and React. See the Getting Started page for how to get started with Recoil and React from scratch. Components in the following sections are assumed to have a `` in the parent tree.","sidebar":"docs"},"basic-tutorial/performance":{"id":"basic-tutorial/performance","title":"Bonus: Performance","description":"Our existing implementation is perfectly valid, but there are some important performance implications to consider as our app evolves from being a small toy project to a million-line corporate program."},"basic-tutorial/selectors":{"id":"basic-tutorial/selectors","title":"Selectors","description":"A selector represents a piece of derived state. You can think of derived state as the output of passing state to a pure function that modifies the given state in some way.","sidebar":"docs"},"guides/asynchronous-data-queries":{"id":"guides/asynchronous-data-queries","title":"Asynchronous Data Queries","description":"Recoil provides a way to map state and derived state to React components via a data-flow graph. What\'s really powerful is that the functions in the graph can also be asynchronous. This makes it easy to use asynchronous functions in synchronous React component render functions. Recoil allows you to seamlessly mix synchronous and asynchronous functions in your data-flow graph of selectors. Simply return a Promise to a value instead of the value itself from a selector get callback, the interface remains exactly the same. Because these are just selectors, other selectors can also depend on them to further transform the data.","sidebar":"docs"},"guides/atom-effects":{"id":"guides/atom-effects","title":"Atom Effects","description":"Atom Effects are a new experimental API for managing side-effects and initializing Recoil atoms.  They have a variety of useful applications such as state persistence, state synchronization, managing history, logging, &c.  They are defined as part of the atom definition, so each atom can specify and compose their own policies.  This API is still evolving, and thus marked as _UNSTABLE.","sidebar":"docs"},"guides/code-splitting":{"id":"guides/code-splitting","title":"Code Splitting","description":"You can write JSX and use React components within your Markdown thanks to MDX."},"guides/dev-tools":{"id":"guides/dev-tools","title":"Development Tools","description":"Recoil has functionality to allow you to observe and update state changes.","sidebar":"docs"},"guides/migrating/from-mobx":{"id":"guides/migrating/from-mobx","title":"From MobX","description":"You can write JSX and use React components within your Markdown thanks to MDX."},"guides/migrating/from-react-state":{"id":"guides/migrating/from-react-state","title":"From React State","description":"You can write JSX and use React components within your Markdown thanks to MDX."},"guides/migrating/from-redux":{"id":"guides/migrating/from-redux","title":"From Redux","description":"You can write JSX and use React components within your Markdown thanks to MDX."},"guides/testing":{"id":"guides/testing","title":"Testing","description":"Testing Recoil state inside of a React component","sidebar":"docs"},"guides/usage-flow":{"id":"guides/usage-flow","title":"Usage with Flow","description":"You can write JSX and use React components within your Markdown thanks to MDX."},"guides/usage-typescript":{"id":"guides/usage-typescript","title":"Usage with TypeScript","description":"You can write JSX and use React components within your Markdown thanks to MDX."},"guides/writing-test":{"id":"guides/writing-test","title":"Writing Tests","description":"You can write JSX and use React components within your Markdown thanks to MDX."},"introduction/core-concepts":{"id":"introduction/core-concepts","title":"Core Concepts","description":"Overview","sidebar":"docs"},"introduction/getting-started":{"id":"introduction/getting-started","title":"Getting Started","description":"Create React App","sidebar":"docs"},"introduction/installation":{"id":"introduction/installation","title":"Installation","description":"NPM","sidebar":"docs"},"introduction/motivation":{"id":"introduction/motivation","title":"Motivation","description":"For reasons of compatibility and simplicity, it\'s best to use React\'s built-in state management capabilities rather than external global state. But React has certain limitations:","sidebar":"docs"},"mdx":{"id":"mdx","title":"Powered by MDX","description":"You can write JSX and use React components within your Markdown thanks to MDX."}}}')}}]);