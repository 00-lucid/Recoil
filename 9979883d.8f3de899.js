(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{128:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var o=n(1),a=n(6),r=(n(0),n(146)),i={title:"Core Concepts"},c={id:"introduction/core-concepts",title:"Core Concepts",description:"## Overview",source:"@site/docs/introduction/core-concepts.md",permalink:"/docs/introduction/core-concepts",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/introduction/core-concepts.md",sidebar:"someSidebar",previous:{title:"Motivation",permalink:"/docs/introduction/motivation"},next:{title:"Installation",permalink:"/docs/introduction/installation"}},s=[{value:"Overview",id:"overview",children:[]},{value:"Atoms",id:"atoms",children:[]},{value:"Selectors",id:"selectors",children:[]}],l={rightToc:s};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"overview"},"Overview"),Object(r.b)("p",null,"Recoil lets you create a data-flow graph that flows from ",Object(r.b)("em",{parentName:"p"},"atoms")," (shared state) through ",Object(r.b)("em",{parentName:"p"},"selectors")," (pure functions) and down into your React components.\nAtoms are units of state that components can subscribe to. Selectors transform"),Object(r.b)("h2",{id:"atoms"},"Atoms"),Object(r.b)("p",null,"Atoms are units of state. They're updateable and subscribeable: when an atom is updated, each subscribed component is re-rendered with the new value."),Object(r.b)("p",null,"Atoms can be used in place of React local component state. If the same atom is used from multiple components, all those components share their state."),Object(r.b)("p",null,"Atoms are created using the ",Object(r.b)("inlineCode",{parentName:"p"},"atom")," function:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"const fontSizeState = atom({\n  key: 'fontSizeState',\n  default: 14,\n});\n")),Object(r.b)("p",null,"Atoms need a unique key, which is used for debugging, persistence, and for certain advanced APIs that let you see a map of all atoms. It is a fatal error\nfor two atoms to have the same key, so make sure they're globally unique. Like React component state, they also have a default value."),Object(r.b)("p",null,"To read and write an atom from a component, we use a hook called ",Object(r.b)("inlineCode",{parentName:"p"},"useRecoilState"),". It's just like React's ",Object(r.b)("inlineCode",{parentName:"p"},"useState"),", but now the state can be shared between components:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"function FontButton() {\n  const [fontSize, setFontSize] = useRecoilState(fontSizeState);\n  return (\n    <button onClick={() => setFontSize(size => size + 1)} style={{fontSize}}>\n      Click to Enlarge\n    </button>\n  );\n}\n")),Object(r.b)("p",null,"Clicking on the button will increase the font size of the button by one. But now some other component can also use the same font size:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"function Text() {\n  const [fontSize, setFontSize] = useRecoilState(fontSizeState);\n  return (\n    <p style={{fontSize}}>\n      This text will increase in size too.\n    </p>\n  );\n}\n")),Object(r.b)("h2",{id:"selectors"},"Selectors"),Object(r.b)("p",null,"A ",Object(r.b)("strong",{parentName:"p"},"selector")," is a pure function that accepts atoms or other selectors as input. When upstream atoms or selectors are updated, the selector\nfunction will be re-evaluated. Components can subscribe to selectors just like atoms, and will then be re-rendered when those selectors change."),Object(r.b)("p",null,"Selectors are used to calculate derived data that is based on state. By avoiding redundant state, this usually obviates the need for\nreducers to keep state in sync and valid. Instead, a minimal set of state is stored in atoms, while everything else is efficiently computed\nas a function of that minimal state. Since selectors keep track of what components need them and what state they depend on, they make this\nfunctional approach efficient."),Object(r.b)("p",null,"From the point of view of components, selectors and atoms have the same interface and can therefore be substituted for one another."),Object(r.b)("p",null,"Selec"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"const fontSizeLabelState = selector({\n  key: 'fontSizeLabelState',\n  get: ({get}) => {\n    const fontSize = get(fontSizeState);\n    const unit = 'px';\n\n    return `${fontSize}${unit}`;\n  },\n});\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"key")," property must be a unique string (with respect to other atoms/selectors) that will be used to identify the selector internally. The ",Object(r.b)("inlineCode",{parentName:"p"},"get")," property is assigned a function whose first parameter can be destructured to extract a ",Object(r.b)("inlineCode",{parentName:"p"},"get()")," function that can read the value of other atoms/selectors."),Object(r.b)("p",null,"When a selector reads the value of another atom/selector, it will internally add that atom/selector to a list of dependencies so that if any of those dependencies change, the selector will re-evaluate. In the ",Object(r.b)("inlineCode",{parentName:"p"},"fontSizeLabelState")," example, the selector has one dependency: the ",Object(r.b)("inlineCode",{parentName:"p"},"fontSizeState")," atom."),Object(r.b)("p",null,"Conceptually, the ",Object(r.b)("inlineCode",{parentName:"p"},"fontSizeLabelState")," selector behaves like a pure function that takes a ",Object(r.b)("inlineCode",{parentName:"p"},"fontSizeState")," as input and returns a formatted font size label as output."),Object(r.b)("p",null,"Selectors can be read using ",Object(r.b)("inlineCode",{parentName:"p"},"useRecoilValue()"),", which takes an atom/selector as its first parameter and returns the corresponding value. Note we can't use ",Object(r.b)("inlineCode",{parentName:"p"},"useRecoilState()")," as the ",Object(r.b)("inlineCode",{parentName:"p"},"fontSizeLabelState")," selector is not writeable (see the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/api-reference/core/selector"}),"selector API reference")," for more information on writeable selectors):"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"function FontButton() {\n  const [fontSize, setFontSize] = useRecoilState(fontSizeState);\n  const increaseFontSizeByOne = () => setFontSize(fontSize + 1);\n\n  const fontSizeLabel = useRecoilValue(fontSizeLabelState);\n\n  return (\n    <>\n      <div>Current font size: ${fontSizeLabel}</div>\n\n      <button onClick={increaseFontSizeByOne} style={{fontSize}}>\n        Click Me!\n      </button>\n    </>\n  );\n}\n")),Object(r.b)("p",null,"Clicking on the button now does two things: it increases the font size of the button while also updating the font size label to reflect the current font size."))}u.isMDXComponent=!0},146:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var o=n(0),a=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},p=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,f=p["".concat(i,".").concat(d)]||p[d]||b[d]||r;return n?a.a.createElement(f,c({ref:t},l,{components:n})):a.a.createElement(f,c({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<r;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);