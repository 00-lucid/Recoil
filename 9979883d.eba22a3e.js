(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{138:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var o=n(1),a=n(6),r=(n(0),n(163)),i={title:"Core Concepts"},c={id:"introduction/core-concepts",title:"Core Concepts",description:"## Atoms",source:"@site/docs/introduction/core-concepts.md",permalink:"/docs/introduction/core-concepts",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/introduction/core-concepts.md",sidebar:"someSidebar",previous:{title:"Motivation",permalink:"/docs/introduction/motivation"},next:{title:"Installation",permalink:"/docs/introduction/installation"}},s=[{value:"Atoms",id:"atoms",children:[]},{value:"Selectors",id:"selectors",children:[]}],l={rightToc:s};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"atoms"},"Atoms"),Object(r.b)("p",null,"An ",Object(r.b)("strong",{parentName:"p"},"atom")," represents a piece of ",Object(r.b)("strong",{parentName:"p"},"state"),". Atoms can be read from and written to from any component. Components that read the value of an atom are implicitly ",Object(r.b)("strong",{parentName:"p"},"subscribed")," to that atom, so any atom updates will result in a re-render of all components subscribed to that atom."),Object(r.b)("p",null,"To define an atom, use the ",Object(r.b)("inlineCode",{parentName:"p"},"atom()")," function:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"const fontSizeState = atom({\n  key: 'fontSizeState',\n  default: 14,\n});\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"key")," property must be a unique string (with respect to other atoms/selectors) that will be used to identify the atom internally. The ",Object(r.b)("inlineCode",{parentName:"p"},"default")," property holds the initial value of the atom."),Object(r.b)("p",null,"To read/write ",Object(r.b)("inlineCode",{parentName:"p"},"fontSizeState"),", we can use the ",Object(r.b)("inlineCode",{parentName:"p"},"useRecoilState()")," hook, which returns a tuple containing the state value and a ",Object(r.b)("strong",{parentName:"p"},"setter function")," that can update the atom's value when called:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"function FontButton() {\n  const [fontSize, setFontSize] = useRecoilState(fontSizeState);\n  const increaseFontSizeByOne = () => setFontSize(fontSize + 1);\n\n  return (\n    <button onClick={increaseFontSizeByOne} style={{fontSize}}>\n      Click Me!\n    </button>\n  );\n}\n")),Object(r.b)("p",null,"Clicking on the button will increase the font size of the button by one. Because ",Object(r.b)("inlineCode",{parentName:"p"},"fontSizeState")," is an atom, it can be read by any component, and all components that read ",Object(r.b)("inlineCode",{parentName:"p"},"fontSizeState")," will re-render when its value changes."),Object(r.b)("h2",{id:"selectors"},"Selectors"),Object(r.b)("p",null,"A ",Object(r.b)("strong",{parentName:"p"},"selector")," represents a piece of ",Object(r.b)("strong",{parentName:"p"},"derived state"),". Derived state is a ",Object(r.b)("strong",{parentName:"p"},"transformation")," of state. You can think of derived state as the output of passing state to a pure function that modifies the given state in some way. Examples include unit/format/language conversions (synchronous) and API calls (asynchronous). For more information on asynchronous selectors, see the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/api-reference/core/selector"}),"selector API reference"),"."),Object(r.b)("p",null,"To define a selector, use the ",Object(r.b)("inlineCode",{parentName:"p"},"selector()")," function:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"const fontSizeLabelState = selector({\n  key: 'fontSizeLabelState',\n  get: ({get}) => {\n    const fontSize = get(fontSizeState);\n    const unit = 'px';\n\n    return `${fontSize}${unit}`;\n  },\n});\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"key")," property must be a unique string (with respect to other atoms/selectors) that will be used to identify the selector internally. The ",Object(r.b)("inlineCode",{parentName:"p"},"get")," property is assigned a function whose first parameter can be destructured to extract a ",Object(r.b)("inlineCode",{parentName:"p"},"get()")," function that can read the value of other atoms/selectors."),Object(r.b)("p",null,"When a selector reads the value of another atom/selector, it will internally add that atom/selector to a list of dependencies so that if any of those dependencies change, the selector will re-evaluate. In the ",Object(r.b)("inlineCode",{parentName:"p"},"fontSizeLabelState")," example, the selector has one dependency: the ",Object(r.b)("inlineCode",{parentName:"p"},"fontSizeState")," atom."),Object(r.b)("p",null,"Conceptually, the ",Object(r.b)("inlineCode",{parentName:"p"},"fontSizeLabelState")," selector behaves like a pure function that takes a ",Object(r.b)("inlineCode",{parentName:"p"},"fontSizeState")," as input and returns a formatted font size label as output."),Object(r.b)("p",null,"Selectors can be read using ",Object(r.b)("inlineCode",{parentName:"p"},"useRecoilValue()"),", which takes an atom/selector as its first parameter and returns the corresponding value. Note we can't use ",Object(r.b)("inlineCode",{parentName:"p"},"useRecoilState()")," as the ",Object(r.b)("inlineCode",{parentName:"p"},"fontSizeLabelState")," selector is not writeable (see the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/api-reference/core/selector"}),"selector API reference")," for more information on writeable selectors):"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"function FontButton() {\n  const [fontSize, setFontSize] = useRecoilState(fontSizeState);\n  const increaseFontSizeByOne = () => setFontSize(fontSize + 1);\n\n  const fontSizeLabel = useRecoilValue(fontSizeLabelState);\n\n  return (\n    <>\n      <div>Current font size: ${fontSizeLabel}</div>\n\n      <button onClick={increaseFontSizeByOne} style={{fontSize}}>\n        Click Me!\n      </button>\n    </>\n  );\n}\n")),Object(r.b)("p",null,"Clicking on the button now does two things: it increases the font size of the button while also updating the font size label to reflect the current font size."))}p.isMDXComponent=!0},163:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var o=n(0),a=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},u=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},f=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),f=o,d=u["".concat(i,".").concat(f)]||u[f]||b[f]||r;return n?a.a.createElement(d,c({ref:t},l,{components:n})):a.a.createElement(d,c({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<r;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"}}]);