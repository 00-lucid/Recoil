"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[7203],{3905:function(e,r,n){n.d(r,{Zo:function(){return s},kt:function(){return f}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=t.createContext({}),c=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},s=function(e){var r=c(e.components);return t.createElement(u.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=c(n),f=o,y=d["".concat(u,".").concat(f)]||d[f]||p[f]||a;return n?t.createElement(y,l(l({ref:r},s),{},{components:n})):t.createElement(y,l({ref:r},s))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var u in r)hasOwnProperty.call(r,u)&&(i[u]=r[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8189:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var t=n(7462),o=n(3366),a=(n(7294),n(3905)),l=["components"],i={title:"Preloaded Queries",sidebar_label:"Preloaded Queries"},u=void 0,c={unversionedId:"recoil-relay/preloaded-queries",id:"recoil-relay/preloaded-queries",title:"Preloaded Queries",description:"Pre-fetch GraphQL",source:"@site/docs/recoil-relay/preloaded-queries.md",sourceDirName:"recoil-relay",slug:"/recoil-relay/preloaded-queries",permalink:"/zh-hans/docs/recoil-relay/preloaded-queries",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/i18n/zh-hans/docusaurus-plugin-content-docs/current/recoil-relay/preloaded-queries.md",tags:[],version:"current",frontMatter:{title:"Preloaded Queries",sidebar_label:"Preloaded Queries"},sidebar:"recoil-relay",previous:{title:"GraphQL Selectors",permalink:"/zh-hans/docs/recoil-relay/graphql-selectors"},next:{title:"GraphQL Atom Effects",permalink:"/zh-hans/docs/recoil-relay/graphql-effects"}},s=[{value:"Pre-fetch GraphQL",id:"pre-fetch-graphql",children:[],level:2},{value:"Preloaded GraphQL",id:"preloaded-graphql",children:[],level:2}],p={toc:s};function d(e){var r=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"pre-fetch-graphql"},"Pre-fetch GraphQL"),(0,a.kt)("p",null,"GraphQL queries can also be pre-fetched using the ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/asynchronous-data-queries#pre-fetching"},"pre-fetching pattern"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function CurrentUserInfo() {\n  const currentUserID = useRecoilValue(currentUserIDState);\n  const userInfo = useRecoilValue(userInfoQuery(currentUserID));\n\n  const changeUser = useRecoilCallback(({snapshot, set}) => userID => {\n    // pre-fetch user info\n    snapshot.getLoadable(userInfoQuery(userID));\n\n    // change current user to start new render\n    set(currentUserIDState, userID);\n  });\n\n  return (\n    <div>\n      <h1>{userInfo.name}</h1>\n      <ul>\n        {userInfo.friends.map(friend =>\n          <li key={friend.id} onClick={() => changeUser(friend.id)}>\n            {friend.name}\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n}\n")),(0,a.kt)("h2",{id:"preloaded-graphql"},"Preloaded GraphQL"),(0,a.kt)("p",null,"If you are using ",(0,a.kt)("a",{parentName:"p",href:"https://relay.dev/docs/api-reference/use-entrypoint-loader/"},"EntryPoints"),", then you can preload queries in parallel with loading most of the JS for your page."),(0,a.kt)("p",null,"First, make sure you ",(0,a.kt)("a",{parentName:"p",href:"/docs/recoil-relay/environment"},"register an ",(0,a.kt)("inlineCode",{parentName:"a"},"EnvironmentKey"))," for your preloaded queries at your applications root:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"export const preloadedEnvironmentKey = new EnvironmentKey('preloaded');\n\nexport function AppRoot() {\n  const preloadedEnvironment = useRelayEnvironment();\n  return (\n    <RecoilRoot>\n      <RecoilRelayEnvironment\n        environmentKey={preloadedEnvironmentKey}\n        environment={preloadedEnvironment}>\n        {/* My App */}\n      </RecoilRelayEnvironment>\n    </RecoilRoot>\n  )\n}\n")),(0,a.kt)("p",null,"Then, direct your queries to use this ",(0,a.kt)("inlineCode",{parentName:"p"},"preloadedEnvironmentKey")," and add a ",(0,a.kt)("inlineCode",{parentName:"p"},"@preloadable")," decorator to the GraphQL:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"export const userQuery = graphQLSelector({\n  key: 'UserQuery',\n  environmentKey: preloadedEnvironmentKey,\n  query: graphql`\n    query UserQuery($id: ID!) @preloadable {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  variables: ({get}) => ({id: get(currentIDAtom)}),\n  mapResponse: data => data?.user,\n});\n")),(0,a.kt)("p",null,"Finally, add this query to the preloaded queries in your ",(0,a.kt)("inlineCode",{parentName:"p"},"*.entrypoint.js")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const MyEntryPoint = {\n  getPreloadProps: params => ({\n    queries: {\n      userQuery: {\n        parameters: require('UserQuery$Parameters'),\n        variables: {id: params.id},\n      },\n  }),\n  root: JSResource('m#MyApp.react'),\n};\n")))}d.isMDXComponent=!0}}]);